/** Chunk was on web.js **/
"use strict";
n.d(t, {
  Z: () => s
}), n(757143), n(301563), n(653041), n(47120);
var r = n(392711),
  i = n.n(r),
  o = n(956067),
  a = n(91159);

function s(e) {
  let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
    n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
  return o.Z.logGroups.map(r => {
    var o, s;
    let {
      index: c,
      timestamp: d,
      logs: f,
      nativeLogs: p,
      serverTrace: _
    } = r, h = 0 === c ? null !== (s = null === (o = i().find(f, e => e.log.indexOf("Logger loaded") >= 0)) || void 0 === o ? void 0 : o.timestamp) && void 0 !== s ? s : e : d, m = l(u(f, p, t, n), h), g = "Trace #".concat(c + 1, " started ").concat((0, a.Ye)(d), "\n").concat(m);
    return null != _ && (g += "\n Server trace for trace #".concat(c + 1).concat(_)), g
  }).join("\n\n")
}

function l(e, t) {
  var n, r;
  let o = c(e).map(e => ({
      totalTime: null == e.timestamp ? "" : ((e.timestamp - t) / 1e3).toFixed(3),
      deltaTime: null == e.delta ? "" : String(Math.round(e.delta)),
      log: "".concat(e.emoji.length > 0 ? "".concat(e.emoji, " ") : "").concat(e.prefix).concat(e.log, "\n")
    })),
    a = null !== (n = i().max(o.map(e => e.totalTime.length))) && void 0 !== n ? n : 0,
    s = null !== (r = i().max(o.map(e => e.deltaTime.length))) && void 0 !== r ? r : 0;
  return o.map(e => {
    let {
      totalTime: t,
      deltaTime: n,
      log: r
    } = e;
    return "".concat(i().padStart(t, a), " ").concat(i().padStart(n, s), " ").concat(r)
  }).join("")
}

function c(e) {
  let t = [];
  for (let n = 0; n < e.length; n++) {
    let r = e[n],
      i = e[n + 1];
    null != i && i.log === r.log.replace("Start ", "Finish ") ? (i.log = i.log.replace("Finish ", ""), t.push(i), n++) : t.push(r)
  }
  return t
}

function u(e, t, n, r) {
  e = e.slice();
  let i = new Set(t.map(f)),
    o = "",
    a = [];
  t.forEach(t => {
    let r = f(t),
      s = 0,
      l = n || !t.autoGenerated,
      c = r.startsWith("Start ") && !r.includes("RUN_JS_BUNDLE") && i.has(r.replace("Start ", "Finish "));
    if (r.startsWith("Finish ") && !r.includes("RUN_JS_BUNDLE") && i.has(r.replace("Finish ", "Start "))) {
      o = o.substring(2);
      let e = a.pop();
      null != e && (s = t.timestamp - e.timestamp, l = l || s > 5 && !d(r), e.shouldKeep = e.shouldKeep || l)
    }
    let u = {
      emoji: "☕",
      timestamp: t.timestamp,
      delta: s > 0 ? s : void 0,
      prefix: o,
      log: r,
      shouldKeep: l
    };
    p(e, u), c && (o += "| ", a.push(u))
  });
  let s = !1;
  return e.filter(e => !(s && e.log.includes("↪")) && !(s = !r && "\uD83C\uDFA8" === e.emoji || !1 === e.shouldKeep))
}

function d(e) {
  return ["GET_CONSTANTS", "CONVERT_CONSTANTS"].some(t => e.includes(t))
}

function f(e) {
  let t = null == e.tag ? e.label : "".concat(e.label, " ").concat(e.tag);
  return t.includes("_START") && (t = "Start " + t.replace("_START", "")), t.includes("_END") && (t = "Finish " + t.replace("_END", "")), t
}

function p(e, t) {
  let n = 0;
  for (; n < e.length; n++) {
    let {
      timestamp: r
    } = e[n];
    if (null != r && r > t.timestamp) break
  }
  e.splice(n, 0, t)
}